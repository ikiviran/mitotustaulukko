/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **display_group**
   * - Table in database
   */
  export namespace display_group {
    export type Table = 'display_group';
    export interface Selectable {
      /**
      * **display_group.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: Date;
      /**
      * **display_group.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **display_group.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number;
      /**
      * **display_group.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified: Date;
      /**
      * **display_group.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **display_group.parent_id**
      * - `text` in database
      * - Nullable, no default
      */
      parent_id: string | null;
      /**
      * **display_group.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version: number;
    }
    export interface JSONSelectable {
      /**
      * **display_group.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: db.TimestampTzString;
      /**
      * **display_group.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **display_group.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number;
      /**
      * **display_group.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified: db.TimestampTzString;
      /**
      * **display_group.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **display_group.parent_id**
      * - `text` in database
      * - Nullable, no default
      */
      parent_id: string | null;
      /**
      * **display_group.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version: number;
    }
    export interface Whereable {
      /**
      * **display_group.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.parent_id**
      * - `text` in database
      * - Nullable, no default
      */
      parent_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **display_group.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **display_group.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **display_group.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **display_group.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **display_group.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **display_group.parent_id**
      * - `text` in database
      * - Nullable, no default
      */
      parent_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **display_group.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **display_group.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **display_group.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **display_group.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **display_group.parent_id**
      * - `text` in database
      * - Nullable, no default
      */
      parent_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'display_group_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **display_group_period**
   * - Table in database
   */
  export namespace display_group_period {
    export type Table = 'display_group_period';
    export interface Selectable {
      /**
      * **display_group_period.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: Date;
      /**
      * **display_group_period.dg_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      dg_id: string;
      /**
      * **display_group_period.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: Date;
      /**
      * **display_group_period.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **display_group_period.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified: Date;
      /**
      * **display_group_period.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: Date;
      /**
      * **display_group_period.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version: number;
    }
    export interface JSONSelectable {
      /**
      * **display_group_period.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: db.TimestampTzString;
      /**
      * **display_group_period.dg_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      dg_id: string;
      /**
      * **display_group_period.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: db.DateString;
      /**
      * **display_group_period.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **display_group_period.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified: db.TimestampTzString;
      /**
      * **display_group_period.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: db.DateString;
      /**
      * **display_group_period.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version: number;
    }
    export interface Whereable {
      /**
      * **display_group_period.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.dg_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      dg_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **display_group_period.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **display_group_period.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **display_group_period.dg_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      dg_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **display_group_period.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **display_group_period.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **display_group_period.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **display_group_period.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **display_group_period.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **display_group_period.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group_period.dg_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      dg_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **display_group_period.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **display_group_period.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group_period.modified**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      modified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **display_group_period.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **display_group_period.version**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      version?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'display_group_period_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = display_group.Table | display_group_period.Table;
    export type Selectable = display_group.Selectable | display_group_period.Selectable;
    export type JSONSelectable = display_group.JSONSelectable | display_group_period.JSONSelectable;
    export type Whereable = display_group.Whereable | display_group_period.Whereable;
    export type Insertable = display_group.Insertable | display_group_period.Insertable;
    export type Updatable = display_group.Updatable | display_group_period.Updatable;
    export type UniqueIndex = display_group.UniqueIndex | display_group_period.UniqueIndex;
    export type Column = display_group.Column | display_group_period.Column;
  
    export type AllBaseTables = [display_group.Table, display_group_period.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [display_group.Table, display_group_period.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "display_group": display_group.Selectable;
    "display_group_period": display_group_period.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "display_group": display_group.JSONSelectable;
    "display_group_period": display_group_period.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "display_group": display_group.Whereable;
    "display_group_period": display_group_period.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "display_group": display_group.Insertable;
    "display_group_period": display_group_period.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "display_group": display_group.Updatable;
    "display_group_period": display_group_period.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "display_group": display_group.UniqueIndex;
    "display_group_period": display_group_period.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "display_group": display_group.Column;
    "display_group_period": display_group_period.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "display_group": display_group.SQL;
    "display_group_period": display_group_period.SQL;
  }[T];

}
